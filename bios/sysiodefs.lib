/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __SYSIODEFS_LIB
#define __SYSIODEFS_LIB
/*** EndHeader */

   /*** BeginHeader  */

#define 	R2000		0x0
#define	R3000		0x0100
#define	R4000		0x0200
#define REV0		0x0
#define REV1		0x1
#define REV2		0x2
#define REV3		0x3				// Rabbit Processor		Code(s) printed on chip
#define R2000_R0 (R2000|REV0)		// 2000 						IQ2T
#define R2000_R1 (R2000|REV1)		// 2000						IQ3T
#define R2000_R2 (R2000|REV2)		// 2000						IQ4T
#define R2000_R3 (R2000|REV3)		// 2000						IQ5T
#define R3000_R0 (R3000|REV0)		// 3000						IL1T or IZ1T
#define R3000_R1 (R3000|REV1)		// 3000A						IL2T or IZ2T
#define R4000_R0 (R4000|REV0)		// 4000						????
// Masks to retrieve CPU ID or Revision number
#define CPU_ID_MASK(x) (x & 0x1f00)
#define CPU_REV_MASK(x) (x & 0x1f)

// The _RAB4K macro is intended to be used for code which uses Rabbit 4000 instructions
// _RAB4KPERI is intended for when a Rabbit4000 is being used just for its peripherals
// i.e. it _may_ be running in R3000 compatibility mode.  Generally, if _RAB4KPERI is
// used for conditional compilation, then tests for _RAB4K should be _within_ those sections
// (the other way around is pretty useless).
#if CPU_ID_MASK(_CPU_ID_) == R4000
	#define _RAB4K 1
   #define _RAB4KPERI 1
	//#use "dma.lib"
#else
	#define _RAB4K 0
   #ifndef _RAB4KPERI
   	#define _RAB4KPERI 0		// Default to assuming is not a Rabbit 4000.
   #endif
#endif

/*** #defines for the registers ***/
#define GCSR      0x00  // global control/status register
#define RTCCR     0x01  // real time clock control register
#define RTC0R     0x02  // real time clock register 0
#define RTC1R     0x03  // real time clock register 0
#define RTC2R     0x04  // real time clock register 0
#define RTC3R     0x05  // real time clock register 0
#define RTC4R     0x06  // real time clock register 0
#define RTC5R     0x07  // real time clock register 0
#define WDTCR     0x08  // watch-dog timer control register
#define WDTTR     0x09  // watch-dog timer test register
#define GCM0R           0x0A    //      global clock modulator register 0
#define GCM1R           0x0B    //      global clock modulator register 1
#define GPSCR           0x0D    //      global power save control register
#define GOCR            0x0E    //      global output control register
#define GCDR            0x0F    //      global clock double register

#define MMIDR     0x10  // MMU program offset register
#define STACKSEG  0x11  // MMU stack base register
#define DATASEG   0x12  // MMU data base register
#define SEGSIZE   0x13  // MMU common bank area register
#define MB0CR     0x14  // memory bank 0 control register
#define MB1CR     0x15  // memory bank 1 control register
#define MB2CR     0x16  // memory bank 2 control register
#define MB3CR     0x17  // memory bank 3 control register
#define MECR      0x18  // MMU expanded code register
#define MTCR      0x19  // memory timing control register
#define BDCR      0x1C  // breakpoint/debug control register

#define SPD0R     0x20  // slave port data 0 register
#define SPD1R     0x21  // slave port data 1 register
#define SPD2R     0x22  // slave port data 2 register
#define SPSR      0x23  // slave port status register
#define SPCR      0x24  // slave port control register
#define GROM            0x2C    //      global ROM configuration register
#define GRAM            0x2D    //      global RAM configuration register
#define GCPU            0x2E    //      global CPU configuration register
#define GREV            0x2F    //      global revision register

#define PADR      0x30  // port A data register

#define PFDR      0x38  // port F data register
#define PFCR            0x3C    //      port F control register
#define PFFR            0x3D    //      port F function register
#define PFDCR           0x3E    //      port F drive control register
#define PFDDR           0x3F    //      port F data direction register

#define PBDR      0x40  // port B data register
#define PBDDR     0x47  // port B data direction register

#define PGDR      0x48  // port G data register
#define PGCR            0x4C    //      port G control register
#define PGFR            0x4D    //      port G function register
#define PGDCR           0x4E    //      port G drive control register
#define PGDDR           0x4F    //      port G data direction register

#define PCDR      0x50  // port C data register
#define PCFR      0x55  // port C function register

#define ICCSR     0x56  // Input Capture Control/Status Register
#define ICCR      0x57  // Input Capture Control Register
#define ICT1R     0x58  // Input Capture Channel 1 Trigger Register
#define ICS1R     0x59  // Input Capture Channel 1 Source Register
#define ICL1R           0x5A    //      Input Capture Channel 1 LSB
#define ICM1R           0x5B    //      Input Capture Channel 1 MSB
#define ICT2R           0x5C    //      Input Capture Channel 2 Trigger Register
#define ICS2R           0x5D    //      Input Capture Channel 2 Source Register
#define ICL2R           0x5E    //      Input Capture Channel 2 LSB
#define ICM2R           0x5F    //      Input Capture Channel 2 MSB

#define PDDR      0x60  // port D data register
#define PDCR      0x64  // port D control register
#define PDFR      0x65  // port D function register
#define PDDCR     0x66  // port D drive control register
#define PDDDR     0x67  // port D data direction register
#define PDB0R     0x68  // port D bit 0 register
#define PDB1R     0x69  // port D bit 1 register
#define PDB2R           0x6A    //      port D bit 2 register
#define PDB3R           0x6B    //      port D bit 3 register
#define PDB4R           0x6C    //      port D bit 4 register
#define PDB5R           0x6D    //      port D bit 5 register
#define PDB6R           0x6E    //      port D bit 6 register
#define PDB7R           0x6F    //      port D bit 7 register

#define PEDR      0x70  // port E data register
#define PECR      0x74  // port E control register
#define PEFR      0x75  // port E function register
#define PEDDR     0x77  // port E data direction register
#define PEB0R     0x78  // port E bit 0 register
#define PEB1R     0x79  // port E bit 1 register
#define PEB2R           0x7A    //      port E bit 2 register
#define PEB3R           0x7B    //      port E bit 3 register
#define PEB4R           0x7C    //      port E bit 4 register
#define PEB5R           0x7D    //      port E bit 5 register
#define PEB6R           0x7E    //      port E bit 6 register
#define PEB7R           0x7F    //      port E bit 7 register

#define IB0CR     0x80  // I/O bank 0 control register
#define IB1CR     0x81  // I/O bank 1 control register
#define IB2CR     0x82  // I/O bank 2 control register
#define IB3CR     0x83  // I/O bank 3 control register
#define IB4CR     0x84  // I/O bank 4 control register
#define IB5CR     0x85  // I/O bank 5 control register
#define IB6CR     0x86  // I/O bank 6 control register
#define IB7CR     0x87  // I/O bank 7 control register

#define PWL0R     0x88  // PWM channel 0 LSB register
#define PWM0R     0x89  // PWM channel 0 MSB register
#define PWL1R           0x8A    //      PWM channel 1 LSB register
#define PWM1R           0x8B    //      PWM channel 1 MSB register
#define PWL2R           0x8C    //      PWM channel 2 LSB register
#define PWM2R           0x8D    //      PWM channel 2 MSB register
#define PWL3R           0x8E    //      PWM channel 3 LSB register
#define PWM3R           0x8F    //      PWM channel 3 MSB register

#define QDCSR     0x90  // quadrature decode control/status register
#define QDCR      0x91  // quadrature decode control register
#define QDC1R     0x94  // quadrature decode channel 1 count
#define QDC1HR    0x95  // quadrature decode channel 1 count
#define QDC2R     0x96  // quadrature decode channel 2 count
#define QDC2HR    0x97  // quadrature decode channel 2 count

#define I0CR      0x98  // interrupt 0 control register
#define I1CR      0x99  // interrupt 1 control register

#define TACSR           0xA0    //      timer A control/status register
#define TAPR            0xA1    // timer A prescale register
#define TAT1R           0xA3    //      timer A time constant 1 register
#define TACR            0xA4    //      timer A control register
#define TAT2R           0xA5    //      timer A time constant 2 register
#define TAT8R           0xA6    //      timer A time constant 8 register
#define TAT3R           0xA7    //      timer A time constant 3 register
#define TAT9R           0xA8    //      timer A time constant 9 register
#define TAT4R           0xA9    //      timer A time constant 4 register
#define TAT10R          0xAA    //      timer A time constant 10 register
#define TAT5R           0xAB    //      timer A time constant 5 register
#define TAT6R           0xAD    //      timer A time constant 6 register
#define TAT7R           0xAF    //      timer A time constant 7 register

#define TBCSR           0xB0    //      timer B control/status register
#define TBCR            0xB1    //      timer B control register
#define TBM1R           0xB2    //      timer B match B1 register, MSB
#define TBL1R           0xB3    //      timer B match B1 register, LSB
#define TBM2R           0xB4    //      timer B match B2 register, MSB
#define TBL2R           0xB5    //      timer B match B2 register, LSB
#define TBCMR           0xBE    //      timer B current count register, MSB
#define TBCLR           0xBF    //      timer B current count register, LSB

#define SADR            0xC0    //      serial port A data register
#define SAAR            0xC1    //      serial port A address register
#define SALR            0xC2    //      serial port A long stop register
#define SASR            0xC3    //      serial port A status register
#define SACR            0xC4    //      serial port A control register
#define SAER            0xC5    //      serial port A extended register

#define SEDR            0xC8    //      serial port E data register
#define SEAR            0xC9    //      serial port E address register
#define SELR            0xCA    //      serial port E long stop register
#define SESR            0xCB    //      serial port E status register
#define SECR            0xCC    //      serial port E control register
#define SEER            0xCD    //      serial port E extended register

#define SBDR      0xD0  // serial port B data register
#define SBAR      0xD1  // serial port B address register
#define SBLR      0xD2  // serial port B long stop register
#define SBSR      0xD3  // serial port B status register
#define SBCR      0xD4  // serial port B control register
#define SBER      0xD5  // serial port B extended register

#define SFDR      0xD8  // serial port F data register
#define SFAR      0xD9  // serial port F address register
#define SFLR      0xDA  // serial port F long stop register
#define SFSR      0xDB  // serial port F status register
#define SFCR      0xDC  // serial port F control register
#define SFER      0xDD  // serial port F extended register

#define SCDR      0xE0  // serial port C data register
#define SCAR      0xE1  // serial port C address register
#define SCLR      0xE2  // serial port C long stop register
#define SCSR      0xE3  // serial port C status register
#define SCCR      0xE4  // serial port C control register
#define SCER      0xE5  // serial port C extended register

#define SDDR      0xF0  // serial port D data register
#define SDAR      0xF1  // serial port D address register
#define SDLR      0xF2  // serial port D long stop register
#define SDSR      0xF3  // serial port D status register
#define SDCR      0xF4  // serial port D control register
#define SDER      0xF5  // serial port D extended register

#if _CPU_ID_ >= R3000_R1
#define RTUER     0x300   // Real Time Clock User Enable Register
#define SPUER     0x320 // Slave Port User Enable Register
#define PAUER     0x330 // Parallel Port A User Enable Register
#define PBUER     0x340   // Parallel Port B User Enable Register
#define PCUER     0x350   // Parallel Port C User Enable Register
#define PDUER     0x360   // Parallel Port D User Enable Register
#define PEUER     0x370   // Parallel Port E User Enable Register
#define PFUER     0x338   // Parallel Port F User Enable Register
#define PGUER     0x348   // Parallel Port G User Enable Register
#define ICUER     0x358   // Input Capture User Enable Register
#define IBUER     0x380   // I/O Bank User Enable Register
#define PWUER     0x388   // PWM User Enable Register
#define QDUER     0x390   // Quad Decode User Enable Register
#define IUER      0x398   // External Interrupt User Enable Register
#define TAUER     0x3A0 // Timer A User Enable Register
#define TBUER     0x3B0 // Timer B User Enable Register
#define SAUER     0x3C0 // Serial Port A User Enable Register
#define SBUER     0x3D0 // Serial Port B User Enable Register
#define SCUER     0x3E0 // Serial Port C User Enable Register
#define SDUER     0x3F0 // Serial Port D User Enable Register
#define SEUER     0x3C8 // Serial Port E User Enable Register
#define SFUER     0x3D8 // Serial Port F User Enable Register

#define EDMR      0x420 // Enable Dual-Mode Register
#define WPCR      0x440 // Write Protect Control Register

#define STKCR     0x444 // Stack Limit Control Register
#define STKLLR    0x445    // Stack Low Limit Register
#define STKHLR    0x446    // Stack High Limit Register

#define RAMSR     0x448    // RAM Segment Register

#define WPLR      0x460
#define WPHR      0x461

#define WPSAR     0x480
#define WPSALR    0x481
#define WPSAHR    0x482
#define WPSBR     0x484
#define WPSBLR    0x485
#define WPSBHR    0x486

#if __RABBITSYS
//internal interrupt vectors register value equivalents
#define IVINT_BASE   0x4B0
#define IV_VALUE(X,BASE)  ((X>>4) + BASE)
#define IVPER     IVINT_VALUE(PERIODIC_OFS, IVINT_BASE)
#define IVSECWD   IVINT_VALUE(SECWD_OFS, IVINT_BASE)
#define IVRST10   IVINT_VALUE(RST10_OFS, IVINT_BASE)
#define IVRST18   IVINT_VALUE(RST18_OFS, IVINT_BASE)
#define IVRST20   IVINT_VALUE(RST20_OFS, IVINT_BASE)
#define IVRST28   IVINT_VALUE(RST28_OFS, IVINT_BASE)
#define IVSYSCALL IVINT_VALUE(SYSCALL_OFS, IVINT_BASE)
#define IVRST38   IVINT_VALUE(RST38_OFS, IVINT_BASE)
#define IVSLAVE   IVINT_VALUE(SLAVE_OFS, IVINT_BASE)
#define IVWPV     IVINT_VALUE(WPV_OFS, IVINT_BASE)
#define IVTIMERA  IVINT_VALUE(TIMERA_OFS, IVINT_BASE)
#define IVTIMERB  IVINT_VALUE(TIMERB_OFS, IVINT_BASE)
#define IVSERA    IVINT_VALUE(SERA_OFS, IVINT_BASE)
#define IVSERB    IVINT_VALUE(SERB_OFS, IVINT_BASE)
#define IVSERC    IVINT_VALUE(SERC_OFS, IVINT_BASE)
#define IVSERD    IVINT_VALUE(SERD_OFS, IVINT_BASE)
#define IVPWM     IVINT_VALUE(PWM_OFS, IVINT_BASE)
#define IVSMV     IVINT_VALUE(SMV_OFS, IVINT_BASE)
#define IVQUAD    IVINT_VALUE(QUAD_OFS, IVINT_BASE)
#define IVINPUTCAP IVINT_VALUE(INPUTCAP_OFS, IVINT_BASE)
#define IVSLV     IVINT_VALUE(SLV_OFS, IVINT_BASE)
#define IVSERE    IVINT_VALUE(SERE_OFS, IVINT_BASE)
#define IVSERF    IVINT_VALUE(SERF_OFS, IVINT_BASE)

//external interrupt vectors register value equivalents
#define IVEXT_BASE   0x4E0
#define IVEXT0    IVINT_VALUE(EXT0_OFS, IVEXT_BASE)
#define IVEXT1    IVINT_VALUE(EXT1_OFS, IVEXT_BASE)
#endif

#endif

#define SS_RRDY_BIT  7  // serial port status read buffer ready bit
#define SS_ADDR_BIT  6  // serial port status address byte in buffer bit
#define SS_OVRN_BIT  5  // serial port status overrun bit
#define SS_TFULL_BIT 3  // serial port status transmit buffer full bit
#define SS_TPRG_BIT  2  // serial port status transmit in progress bit

#define SWDTR                   0x0C  // secondary watchdog timer register

// Internal interrupts and their offset from INTVEC_BASE
#define PERIODIC_OFS 0x0
#define SECWD_OFS    0x10
#define RST10_OFS    0x20
#define RST18_OFS    0x30
#define RST20_OFS    0x40
#define RST28_OFS    0x50
#define SYSCALL_OFS  0x60
#define RST38_OFS    0x70
#define SLAVE_OFS    0x80
#define WPV_OFS      0x90  // Write Protect Violation
#define TIMERA_OFS   0xA0
#define TIMERB_OFS   0xB0
#define SERA_OFS     0xC0
#define SERB_OFS     0xD0
#define SERC_OFS     0xE0
#define SERD_OFS     0xF0
// The following can be co-located in the same 256 byte block as external interrupts
#define PWM_OFS      0x170
#define SMV_OFS      0x180 // System Mode Violation
#define QUAD_OFS     0x190
#define INPUTCAP_OFS 0x1A0
#define SLV_OFS      0x1B0 // Stack Limit Violation
#define SERE_OFS     0x1C0
#define SERF_OFS     0x1D0

// External interrupts and their offset from XINTVEC_BASE
#define EXT0_OFS     0x0
#define EXT1_OFS     0x10

#define _OP_JP       0xC3
#define _OP_RET      0xC9
/*** EndHeader */

/*** BeginHeader */
#endif
/*** EndHeader */

